package Base;

import Algorithms.*;

import java.util.List;
import java.util.Scanner;

class Test { //Tests for (various methods in the codebase) all methods in the Algorithms package
	public static void main(String[] args) {

//		Test.LineDrawingAlgorithms();

//		Test.CircleDrawingAlgorithms();

//		Test.EllipseDrawingAlgorithms();

//		Test.WorldLines();

		Test.WorldCircles();
	}

	static void LineDrawingAlgorithms() {

		//Creating a list of start & end coordinate pairs, covering all the possible slope values
		int[][] start = {{-5, 0}, {-5, 5}, {0, 5}, {5, 5}, {5, 0}, {5, -5}, {0, -5}, {-5, -5}};
		int[][] end = {{5, 0}, {5, -5}, {0, -5}, {-5, -5}, {-5, 0}, {-5, 5}, {0, 5}, {5, 5}};

		//Instantiating a Scanner object to control output display for each coordinate pair step-by-step
		Scanner scan = new Scanner(System.in);

		//Instantiating a Line object to access required algorithms
		Line newLine = new Line();

		//Initializing point list to store points generated by the algorithms
		List<Point> PointList;

		//Instantiating a Plotter object to plot the lines
		Plotter plotObj = new Plotter();

		//Initiating test loop
		for (int i = 0; i < 8; i++) {

			//Assigning current coordinate pair values
			int x1 = start[i][0];
			int y1 = start[i][1];
			int x2 = end[i][0];
			int y2 = end[i][1];

			//Displaying current coordinate pair
			System.out.println("\n" + i + ". Start(" + x1 + "," + y1 + ") | End(" + x2 + "," + y2 + ")");
			System.out.println();

			//Calculating line using SimpleDDA
			System.out.println("SimpleDDA");
			PointList = newLine.SimpleDDA(x1, y1, x2, y2);
			plotObj.printLine(PointList);
			System.out.println();
			plotObj.plotLine(PointList, '*');

			//Calculating line using SymmetricalDDA
			System.out.println("SymmetricalDDA");
			PointList = newLine.SymmetricalDDA(x1, y1, x2, y2);
			plotObj.printLine(PointList);
			System.out.println();
			plotObj.plotLine(PointList, '*');


			//Calculating line using Bresenham's
			System.out.println("Bresenham's");
			PointList = newLine.Bresenhams(x1, y1, x2, y2);
			plotObj.printLine(PointList);
			System.out.println();
			plotObj.plotLine(PointList, '*');


			//Calculating line using Midpoint
			System.out.println("Midpoint");
			PointList = newLine.Midpoint(x1, y1, x2, y2);
			plotObj.printLine(PointList);
			System.out.println();
			plotObj.plotLine(PointList, '*');


			scan.nextLine(); //Waiting for user input to move on to the next iteration/coordinate pair
		}
	}

	static void CircleDrawingAlgorithms() {

		//Creating a list of radii to test
		int[] radii = {7, 14, 21};

		//Instantiating a Scanner object to control output display for each coordinate pair step-by-step
		Scanner scan = new Scanner(System.in);

		//Instantiating a Circle object to access required algorithms
		Circle newCircle = new Circle();

		//Initializing point list to store points generated by the algorithms
		List<Point> PointList;

		//Instantiating a Plotter object to plot the lines
		Plotter plotObj = new Plotter();

		//Initiating test loop
		for (int i = 0; i < 3; i++) {

			//Assigning current radius
			int radius = radii[i];

			//Displaying current radius
			System.out.println("\n" + i + ". Radius = " + radius);
			System.out.println();

			//Calculating circle using DDA
			System.out.println("DDA");
			PointList = newCircle.DDA(radius);
			plotObj.printCircle(PointList);
			plotObj.plotCircle(PointList, radius, '*');
			System.out.println();

			//Calculating circle using Bresenham's
			System.out.println("Bresenham's");
			PointList = newCircle.Bresenhams(radius);
			plotObj.printCircle(PointList);
			plotObj.plotCircle(PointList, radius, '*');
			System.out.println();


			//Calculating circle using Midpoint
			System.out.println("Midpoint");
			PointList = newCircle.MidPoint(radius);
			plotObj.printCircle(PointList);
			plotObj.plotCircle(PointList, radius, '*');
			System.out.println();


			scan.nextLine(); //Waiting for user input to move on to the next iteration
		}
	}

	static void EllipseDrawingAlgorithms() {
		//Creating a list of radii to test
		int[][] Radii_Pairs = {{6, 12, 18}, {9, 18, 27}};

		//Instantiating a Scanner object to control output display for each coordinate pair step-by-step
		Scanner scan = new Scanner(System.in);

		//Instantiating a Circle object to access required algorithm
		Circle newCircle = new Circle();

		//Initiating test loop
		for (int i = 0; i < 3; i++) {

			//Assigning current radius
			int radiusOne = Radii_Pairs[0][i];
			int radiusTwo = Radii_Pairs[1][i];

			//Displaying current radii pair
			System.out.println("\n" + i + ". Radius 1 = " + radiusOne + ", Radius 2 = " + radiusTwo);
			System.out.println();

			//Calculating ellipse using Midpoint
			System.out.println("Ellipse");
			newCircle.Ellipse(radiusOne, radiusTwo);

			scan.nextLine(); //Waiting for user input to move on to the next iteration
		}
	}

	static void WorldLines() {

		//Creating a list of start & end coordinate pairs, covering all the possible slope values
		int[][] start = {{-5, 0}, {-5, 5}, {0, 5}, {5, 5}, {5, 0}, {5, -5}, {0, -5}, {-5, -5}};
		int[][] end = {{5, 0}, {5, -5}, {0, -5}, {-5, -5}, {-5, 0}, {-5, 5}, {0, 5}, {5, 5}};

		//Instantiating a Line object to access required algorithms
		Line newLine = new Line();

		//Initializing point list to store points generated by the algorithms
		List<Point> Line;

		//Instantiating a Plotter object to plot the lines
		Plotter plotObj = new Plotter(13, 13);

		//Initiating test loop
		for (int i = 0; i < 8; i++) {

			//Assigning current coordinate pair values
			int x1 = start[i][0];
			int y1 = start[i][1];
			int x2 = end[i][0];
			int y2 = end[i][1];

			//Displaying current coordinate pair
			System.out.println("\n" + i + ". Start(" + x1 + "," + y1 + ") | End(" + x2 + "," + y2 + ")");
			System.out.println();

			//Calculating line using SimpleDDA
			Line = newLine.SimpleDDA(x1, y1, x2, y2);
			plotObj.printLine(Line);
			System.out.println("SimpleDDA");
			plotObj.WorldPlotLine(Line, '*');

			//Calculating line using SymmetricalDDA
			Line = newLine.SymmetricalDDA(x1, y1, x2, y2);
			plotObj.printLine(Line);
			System.out.println("SymmetricalDDA");
			plotObj.WorldPlotLine(Line, '*');

			//Calculating line using Bresenham's
			Line = newLine.Bresenhams(x1, y1, x2, y2);
			plotObj.printLine(Line);
			System.out.println("Bresenham's");
			plotObj.WorldPlotLine(Line, '*');

			//Calculating line using Midpoint
			Line = newLine.Midpoint(x1, y1, x2, y2);
			plotObj.printLine(Line);
			System.out.println("Midpoint");
			plotObj.WorldPlotLine(Line, '*');

		}

		//Displaying the World
		plotObj.WorldDisplay();
	}

	static void WorldCircles() {

		//Creating a list of radii to test
		int[] radii = {7, 14, 21};

		//Instantiating a Circle object to access required algorithms
		Circle newCircle = new Circle();

		//Initializing point list to store points generated by the algorithms
		List<Point> Circle;

		//Instantiating a Plotter object to plot the lines
		Plotter plotObj = new Plotter(43, 43);

		//Initiating test loop
		for (int i = 0; i < 3; i++) {

			//Assigning current radius
			int radius = radii[i];

			//Displaying current radius
			System.out.println("\n" + i + ". Radius = " + radius);
			System.out.println();

			//Calculating circle using DDA
			System.out.println("DDA");
			Circle = newCircle.DDA(radius);
			plotObj.printCircle(Circle);
			plotObj.WorldPlotCircle(Circle, 'd');
			System.out.println();

			//Calculating circle using Bresenham's
			System.out.println("Bresenham's");
			Circle = newCircle.Bresenhams(radius);
			plotObj.printCircle(Circle);
			plotObj.WorldPlotCircle(Circle, 'k');
			System.out.println();

			//Calculating circle using Midpoint
			System.out.println("Midpoint");
			Circle = newCircle.MidPoint(radius);
			plotObj.printCircle(Circle);
			plotObj.WorldPlotCircle(Circle, 'o');
			System.out.println();
		}

		plotObj.WorldDisplay();
	}

}